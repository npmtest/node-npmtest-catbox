{"/home/travis/build/npmtest/node-npmtest-catbox/test.js":"/* istanbul instrument in package npmtest_catbox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-catbox/lib.npmtest_catbox.js":"/* istanbul instrument in package npmtest_catbox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_catbox = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_catbox = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-catbox/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-catbox && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_catbox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_catbox\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_catbox.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_catbox.rollup.js'] =\n            local.assetsDict['/assets.npmtest_catbox.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_catbox.__dirname +\n                    '/lib.npmtest_catbox.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-catbox/node_modules/catbox/lib/index.js":"'use strict';\n\n// Load modules\n\nconst Client = require('./client');\nconst Policy = require('./policy');\n\n\n// Declare internals\n\nconst internals = {};\n\n\nexports.Client = Client;\nexports.Policy = exports.policy = Policy;\n","/home/travis/build/npmtest/node-npmtest-catbox/node_modules/catbox/lib/client.js":"'use strict';\n\n// Load modules\n\nconst Hoek = require('hoek');\nconst Boom = require('boom');\n\n\n// Declare internals\n\nconst internals = {};\n\n\ninternals.defaults = {\n    partition: 'catbox'\n};\n\n\nmodule.exports = internals.Client = function (engine, options) {\n\n    Hoek.assert(this instanceof internals.Client, 'Cache client must be instantiated using new');\n    Hoek.assert(engine, 'Missing catbox client engine');\n    Hoek.assert(typeof engine === 'object' || typeof engine === 'function', 'engine must be an engine object or engine prototype (function)');\n    Hoek.assert(typeof engine === 'function' || !options, 'Can only specify options with function engine config');\n\n    const settings = Hoek.applyToDefaults(internals.defaults, options || {});\n    Hoek.assert(settings.partition.match(/^[\\w\\-]+$/), 'Invalid partition name:' + settings.partition);\n\n    this.connection = (typeof engine === 'object' ? engine : new engine(settings));\n};\n\n\ninternals.Client.prototype.stop = function () {\n\n    this.connection.stop();\n};\n\n\ninternals.Client.prototype.start = function (callback) {\n\n    this.connection.start(callback);\n};\n\n\ninternals.Client.prototype.isReady = function () {\n\n    return this.connection.isReady();\n};\n\n\ninternals.Client.prototype.validateSegmentName = function (name) {\n\n    return this.connection.validateSegmentName(name);\n};\n\n\ninternals.Client.prototype.get = function (key, callback) {\n\n    if (!this.connection.isReady()) {\n        // Disconnected\n        return callback(Boom.internal('Disconnected'));\n    }\n\n    if (!key) {\n        // Not found on null\n        return callback(null, null);\n    }\n\n    if (!internals.validateKey(key)) {\n        return callback(Boom.internal('Invalid key'));\n    }\n\n    this.connection.get(key, (err, result) => {\n\n        if (err) {\n            // Connection error\n            return callback(err);\n        }\n\n        if (!result ||\n            result.item === undefined ||\n            result.item === null) {\n\n            // Not found\n            return callback(null, null);\n        }\n\n        const now = Date.now();\n        const expires = result.stored + result.ttl;\n        const ttl = expires - now;\n        if (ttl <= 0) {\n            // Expired\n            return callback(null, null);\n        }\n\n        // Valid\n\n        const cached = {\n            item: result.item,\n            stored: result.stored,\n            ttl\n        };\n\n        return callback(null, cached);\n    });\n};\n\n\ninternals.Client.prototype.set = function (key, value, ttl, callback) {\n\n    if (!this.connection.isReady()) {\n        // Disconnected\n        return callback(Boom.internal('Disconnected'));\n    }\n\n    if (!internals.validateKey(key)) {\n        return callback(Boom.internal('Invalid key'));\n    }\n\n    if (ttl <= 0) {\n        // Not cachable (or bad rules)\n        return callback();\n    }\n\n    this.connection.set(key, value, ttl, callback);\n};\n\n\ninternals.Client.prototype.drop = function (key, callback) {\n\n    if (!this.connection.isReady()) {\n        // Disconnected\n        return callback(Boom.internal('Disconnected'));\n    }\n\n    if (!internals.validateKey(key)) {\n        return callback(Boom.internal('Invalid key'));\n    }\n\n    this.connection.drop(key, callback);           // Always drop, regardless of caching rules\n};\n\n\ninternals.validateKey = function (key) {\n\n    return (key && typeof key.id === 'string' && key.segment && typeof key.segment === 'string');\n};\n","/home/travis/build/npmtest/node-npmtest-catbox/node_modules/catbox/lib/policy.js":"'use strict';\n\n// Load modules\n\nconst Boom = require('boom');\nconst Hoek = require('hoek');\nconst Joi = require('joi');\n\n\n// Declare internals\n\nconst internals = {\n    day: 24 * 60 * 60 * 1000\n};\n\n\nexports = module.exports = internals.Policy = function (options, cache, segment) {\n\n    Hoek.assert(this instanceof internals.Policy, 'Cache Policy must be instantiated using new');\n\n    this._cache = cache;\n    this._pendings = {};                                        // id -> [callbacks]\n    this._pendingGenerateCall = {};                             // id -> boolean\n    this.rules(options);\n\n    this.stats = {\n        sets: 0,\n        gets: 0,\n        hits: 0,\n        stales: 0,\n        generates: 0,\n        errors: 0\n    };\n\n    if (cache) {\n        const nameErr = cache.validateSegmentName(segment);\n        Hoek.assert(nameErr === null, 'Invalid segment name: ' + segment + (nameErr ? ' (' + nameErr.message + ')' : ''));\n\n        this._segment = segment;\n    }\n};\n\n\ninternals.Policy.prototype.rules = function (options) {\n\n    this.rule = internals.Policy.compile(options, !!this._cache);\n};\n\n\ninternals.Policy.prototype.get = function (key, callback) {     // key: string or { id: 'id' }\n\n    ++this.stats.gets;\n\n    // Check if request is already pending\n\n    const id = (key && typeof key === 'object') ? key.id : key;\n    const pendingsId = '+' + id;                                  // Prefix to avoid conflicts with JS internals (e.g. __proto__)\n    if (this._pendings[pendingsId]) {\n        this._pendings[pendingsId].push(process.domain ? process.domain.bind(callback) : callback);     // Explicitly bind callback to its process.domain (_finalize might get called from a different active process.domain)\n        return;\n    }\n\n    this._pendings[pendingsId] = [callback];\n\n    // Lookup in cache\n\n    const timer = new Hoek.Timer();\n    this._get(id, (err, cached) => {\n\n        if (err) {\n            ++this.stats.errors;\n        }\n\n        // Prepare report\n\n        const report = {\n            msec: timer.elapsed(),\n            error: err\n        };\n\n        if (cached) {\n            report.stored = cached.stored;\n            report.ttl = cached.ttl;\n            const staleIn = typeof this.rule.staleIn === 'function' ? this.rule.staleIn(cached.stored, cached.ttl) : this.rule.staleIn;\n            cached.isStale = (staleIn ? (Date.now() - cached.stored) >= staleIn : false);\n            report.isStale = cached.isStale;\n\n            if (cached.isStale) {\n                ++this.stats.stales;\n            }\n        }\n\n        // No generate method\n\n        if (!this.rule.generateFunc ||\n            (err && !this.rule.generateOnReadError)) {\n\n            return internals.respond(this, id, err, cached ? cached.item : null, cached, report);\n        }\n\n        // Check if found and fresh\n\n        if (cached &&\n            !cached.isStale) {\n\n            return internals.respond(this, id, null, cached.item, cached, report);\n        }\n\n        return this._generate(id, key, cached, report);\n    });\n};\n\n\ninternals.Policy.prototype._generate = function (id, key, cached, report) {\n\n    const respond = Hoek.once(internals.respond);\n\n    if (cached) {                                       // Must be stale\n\n        // Set stale timeout\n\n        cached.ttl = cached.ttl - this.rule.staleTimeout;       // Adjust TTL for when the timeout is invoked (staleTimeout must be valid if isStale is true)\n        if (cached.ttl > 0) {\n            setTimeout(() => {\n\n                return respond(this, id, null, cached.item, cached, report);\n            }, this.rule.staleTimeout);\n        }\n    }\n    else if (this.rule.generateTimeout) {\n\n        // Set item generation timeout (when not in cache)\n\n        setTimeout(() => {\n\n            return respond(this, id, Boom.serverUnavailable(), null, null, report);\n        }, this.rule.generateTimeout);\n    }\n\n    // Generate new value\n\n    const pendingId = ('+' + id);\n    if (!this._pendingGenerateCall[pendingId]) {                // Check if a generate call is already in progress\n        ++this.stats.generates;                                 // Record generation before call in case it times out\n\n        if (this.rule.pendingGenerateTimeout) {\n            this._pendingGenerateCall[pendingId] = true;\n            setTimeout(() => {\n\n                delete this._pendingGenerateCall[pendingId];\n            }, this.rule.pendingGenerateTimeout);\n        }\n\n        try {\n            this._callGenerateFunc(id, key, cached, report, respond);\n        }\n        catch (err) {\n            delete this._pendingGenerateCall[pendingId];\n            return respond(this, id, err, null, null, report);\n        }\n    }\n};\n\n\ninternals.Policy.prototype._callGenerateFunc = function (id, key, cached, report, respond) {\n\n    this.rule.generateFunc.call(null, key, (generateError, value, ttl) => {\n\n        delete this._pendingGenerateCall['+' + id];\n\n        const finalize = (err) => {\n\n            const error = generateError || (this.rule.generateIgnoreWriteError ? null : err);\n            if (cached &&\n                error &&\n                !this.rule.dropOnError) {\n\n                return respond(this, id, error, cached.item, cached, report);\n            }\n\n            return respond(this, id, error, value, null, report);       // Ignored if stale value already returned\n        };\n\n        // Error (if dropOnError is not set to false) or not cached\n\n        if ((generateError && this.rule.dropOnError) || ttl === 0) {                                    // null or undefined means use policy\n            return this.drop(id, finalize);                 // Invalidate cache\n        }\n\n        if (!generateError) {\n            return this.set(id, value, ttl, finalize);      // Lazy save (replaces stale cache copy with late-coming fresh copy)\n        }\n\n        return finalize();\n    });\n};\n\n\ninternals.Policy.prototype._get = function (id, callback) {\n\n    if (!this._cache) {\n        return Hoek.nextTick(callback)(null, null);\n    }\n\n    this._cache.get({ segment: this._segment, id }, callback);\n};\n\n\ninternals.respond = function (policy, id, err, value, cached, report) {\n\n    id = '+' + id;\n    const pendings = policy._pendings[id];\n    delete policy._pendings[id];\n\n    const length = pendings.length;\n    for (let i = 0; i < length; ++i) {\n        Hoek.nextTick(pendings[i])(err, value, cached, report);\n    }\n\n    if (report.isStale !== undefined) {\n        policy.stats.hits = policy.stats.hits + length;\n    }\n};\n\n\ninternals.Policy.prototype.set = function (key, value, ttl, callback) {\n\n    callback = callback || Hoek.ignore;\n\n    ++this.stats.sets;\n\n    if (!this._cache) {\n        return callback(null);\n    }\n\n    ttl = ttl || internals.Policy.ttl(this.rule);\n    const id = (key && typeof key === 'object') ? key.id : key;\n    this._cache.set({ segment: this._segment, id }, value, ttl, (err) => {\n\n        if (err) {\n            ++this.stats.errors;\n        }\n\n        return callback(err);\n    });\n};\n\n\ninternals.Policy.prototype.drop = function (key, callback) {\n\n    callback = callback || Hoek.ignore;\n\n    if (!this._cache) {\n        return callback(null);\n    }\n\n    const id = (key && typeof key === 'object') ? key.id : key;\n    if (!id) {\n        return callback(new Error('Invalid key'));\n    }\n\n    this._cache.drop({ segment: this._segment, id }, (err) => {\n\n        if (err) {\n            ++this.stats.errors;\n        }\n\n        return callback(err);\n    });\n};\n\n\ninternals.Policy.prototype.ttl = function (created) {\n\n    return internals.Policy.ttl(this.rule, created);\n};\n\n\ninternals.schema = Joi.object({\n    expiresIn: Joi.number().integer().min(1),\n    expiresAt: Joi.string().regex(/^\\d\\d?\\:\\d\\d$/),\n    staleIn: [Joi.number().integer().min(1).max(86400000 - 1), Joi.func()],               // One day - 1 (max is inclusive)\n    staleTimeout: Joi.number().integer().min(1),\n    generateFunc: Joi.func(),\n    generateTimeout: Joi.number().integer().min(1).allow(false),\n    generateOnReadError: Joi.boolean(),\n    generateIgnoreWriteError: Joi.boolean(),\n    dropOnError: Joi.boolean(),\n    pendingGenerateTimeout: Joi.number().integer().min(1),\n\n    // Ignored external keys (hapi)\n\n    privacy: Joi.any(),\n    cache: Joi.any(),\n    segment: Joi.any(),\n    shared: Joi.any()\n})\n    .without('expiresIn', 'expiresAt')\n    .with('staleIn', 'generateFunc')\n    .with('generateOnReadError', 'generateFunc')\n    .with('generateIgnoreWriteError', 'generateFunc')\n    .with('dropOnError', 'generateFunc')\n    .and('generateFunc', 'generateTimeout')\n    .and('staleIn', 'staleTimeout');\n\n\ninternals.Policy.compile = function (options, serverSide) {\n\n    /*\n        {\n            expiresIn: 30000,\n            expiresAt: '13:00',\n\n            generateFunc: function (id, next) { next(err, result, ttl); }\n            generateTimeout: 500,\n            generateOnReadError: true,\n            generateIgnoreWriteError: true,\n            staleIn: 20000,\n            staleTimeout: 500,\n            dropOnError: true\n        }\n     */\n\n    const rule = {};\n\n    if (!options ||\n        !Object.keys(options).length) {\n\n        return rule;\n    }\n\n    // Validate rule\n\n    Joi.assert(options, internals.schema, 'Invalid cache policy configuration');\n\n    const hasExpiresIn = options.expiresIn !== undefined && options.expiresIn !== null;\n    const hasExpiresAt = options.expiresAt !== undefined && options.expiresAt !== null;\n\n    Hoek.assert(!hasExpiresAt || typeof options.expiresAt === 'string', 'expiresAt must be a string', options);\n    Hoek.assert(!hasExpiresIn || Hoek.isInteger(options.expiresIn), 'expiresIn must be an integer', options);\n    Hoek.assert(!hasExpiresIn || !options.staleIn || typeof options.staleIn === 'function' || options.staleIn < options.expiresIn, 'staleIn must be less than expiresIn');\n    Hoek.assert(!options.staleIn || serverSide, 'Cannot use stale options without server-side caching');\n    Hoek.assert(!options.staleTimeout || !hasExpiresIn || options.staleTimeout < options.expiresIn, 'staleTimeout must be less than expiresIn');\n    Hoek.assert(!options.staleTimeout || !hasExpiresIn || typeof options.staleIn === 'function' || options.staleTimeout < (options.expiresIn - options.staleIn), 'staleTimeout must be less than the delta between expiresIn and staleIn');\n    Hoek.assert(!options.staleTimeout || !options.pendingGenerateTimeout || options.staleTimeout < options.pendingGenerateTimeout, 'pendingGenerateTimeout must be greater than staleTimeout if specified');\n\n    // Expiration\n\n    if (hasExpiresAt) {\n\n        // expiresAt\n\n        const time = /^(\\d\\d?):(\\d\\d)$/.exec(options.expiresAt);\n        rule.expiresAt = {\n            hours: parseInt(time[1], 10),\n            minutes: parseInt(time[2], 10)\n        };\n    }\n    else {\n\n        // expiresIn\n\n        rule.expiresIn = options.expiresIn || 0;\n    }\n\n    // generateTimeout\n\n    if (options.generateFunc) {\n        rule.generateFunc = options.generateFunc;\n        rule.generateTimeout = options.generateTimeout;\n\n        // Stale\n\n        if (options.staleIn) {\n            rule.staleIn = options.staleIn;\n            rule.staleTimeout = options.staleTimeout;\n        }\n\n        rule.dropOnError = options.dropOnError !== undefined ? options.dropOnError : true;                                          // Defaults to true\n        rule.pendingGenerateTimeout = options.pendingGenerateTimeout !== undefined ? options.pendingGenerateTimeout : 0;            // Defaults to zero\n    }\n\n    rule.generateOnReadError = options.generateOnReadError !== undefined ? options.generateOnReadError : true;                      // Defaults to true\n    rule.generateIgnoreWriteError = options.generateIgnoreWriteError !== undefined ? options.generateIgnoreWriteError : true;       // Defaults to true\n\n    return rule;\n};\n\n\ninternals.Policy.ttl = function (rule, created, now) {\n\n    now = now || Date.now();\n    created = created || now;\n    const age = now - created;\n\n    if (age < 0) {\n        return 0;                                                                   // Created in the future, assume expired/bad\n    }\n\n    if (rule.expiresIn) {\n        return Math.max(rule.expiresIn - age, 0);\n    }\n\n    if (rule.expiresAt) {\n        if (age > internals.day) {                                                  // If the item was created more than a 24 hours ago\n            return 0;\n        }\n\n        const expiresAt = new Date(created);                                        // Compare expiration time on the same day\n        expiresAt.setHours(rule.expiresAt.hours);\n        expiresAt.setMinutes(rule.expiresAt.minutes);\n        expiresAt.setSeconds(0);\n        expiresAt.setMilliseconds(0);\n        let expires = expiresAt.getTime();\n\n        if (expires <= created) {\n            expires = expires + internals.day;                                     // Move to tomorrow\n        }\n\n        if (now >= expires) {                                                      // Expired\n            return 0;\n        }\n\n        return expires - now;\n    }\n\n    return 0;                                                                       // No rule\n};\n\n\ninternals.Policy.prototype.isReady = function () {\n\n    if (!this._cache) {\n        return false;\n    }\n\n    return this._cache.connection.isReady();\n};\n"}